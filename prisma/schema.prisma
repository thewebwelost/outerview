// docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  // Relations
  profiles     Profile[]
  applications Application[]
  events       Event[]
  credentials  Credentials?
}

model Credentials {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String @ignore
  userId   Int    @unique
  // Relations
  User     User   @relation(fields: [userId], references: [id])
}

model Link {
  id            Int          @id @default(autoincrement())
  title         String
  url           String
  applicationId Int?
  profileId     Int?
  // Relations
  Application   Application? @relation(fields: [applicationId], references: [id])
  Profile       Profile?     @relation(fields: [profileId], references: [id])
}

model Application {
  id          Int               @id @default(autoincrement())
  company     String
  role        String
  url         String?
  description String?
  salary      String
  location    String
  status      ApplicationStatus @default(FIRST_TOUCH)
  userId      Int?
  // Relations
  contacts    Link[]
  userEvents  Event[]
  User        User?             @relation(fields: [userId], references: [id])
}

model Profile {
  id         Int          @id @default(autoincrement())
  userId     Int
  name       String
  title      String
  email      String
  website    String
  location   String
  summary    String
  details    String[]
  hardSkills String[]
  softSkills String[]
  isComplete Boolean      @default(false)
  // Relations
  User       User         @relation(fields: [userId], references: [id])
  experience Experience[]
  education  Education[]
  socials    Link[]
}

model Experience {
  id               Int      @id @default(autoincrement())
  profileId        Int?
  role             String
  company          String
  startDate        DateTime
  endDate          DateTime
  isCurrent        Boolean  @default(false)
  responsibilities String
  achievements     String[]
  keywords         String[]
  // Relations
  Profile          Profile? @relation(fields: [profileId], references: [id])
}

model Education {
  id        Int      @id @default(autoincrement())
  profileId Int?
  name      String
  startDate DateTime
  endDate   DateTime
  degree    String
  details   String[]
  // Relations
  Profile   Profile? @relation(fields: [profileId], references: [id])
}

model Event {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  dateStart     DateTime
  dateEnd       DateTime
  meetinUrl     String?
  description   String?
  applicationId Int?
  userId        Int?
  status        EventStatus  @default(PENDING)
  step          EventStep    @default(APPLICATION)
  // Relations
  Application   Application? @relation(fields: [applicationId], references: [id])
  User          User?        @relation(fields: [userId], references: [id])
}

// Enums

enum EventStatus {
  PENDING
  SUCCESS
  FAILED
}

enum EventStep {
  APPLICATION
  PHONE_SCREEN
  ONSITE_STEP
  BEHAVIOURAL
  CLOSER
}

enum ApplicationStatus {
  FIRST_TOUCH
  PRESCREEN
  TECHNICAL
  NON_TECHNICAL
  OFFER
}
